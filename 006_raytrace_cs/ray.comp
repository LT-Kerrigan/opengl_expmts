/* compute shader for making rays
Anton Gerdelan
First version 4 Sep 2014
 */
#version 430
#define RES 512.0

// this is a 2d local wg layout.
// global wg layout was 800x800 units, and subdivided so that each cs processes
// a 1x1 'local wg' unit of this
layout (local_size_x = 1, local_size_y = 1) in;
layout (rgba32f, binding = 0) uniform image2D img_output;

uniform float time;

void main () {
	vec4 texel = vec4 (0.0, 0.0, 0.0, 1.0);

	// get position in global work group 800x800
	ivec2 p = ivec2 (gl_GlobalInvocationID.xy);
	// NB this also gives us the texture coords
	
	// sample or work-out ray origin and direction
	float max_x = 5.0;
	float max_y = 5.0;
	float x = (float(p.x * 2 - RES) / RES);
	float y = (float(p.y * 2 - RES) / RES);
	vec3 ray_o = vec3 (x * max_x, y * max_y, 0.0);
	vec3 ray_d = vec3 (0.0, 0.0, -1.0); // ortho
	
	vec3 light_pos = vec3 (5.0, 2.0, 0.0);
	vec3 light_spec = vec3 (0.5, 0.5, 0.5);
	vec3 light_diff = vec3 (0.5, 0.5, 0.5);
	vec3 light_amb = vec3 (0.1, 0.1, 0.1);
	
	vec3 sphere_kd = vec3 (0.2, 0.2, 0.9);
	vec3 sphere_ka = vec3 (0.2, 0.2, 0.9);
	vec3 sphere_ks = vec3 (1.0, 1.0, 1.0);
	float spec_exp = 100.0;
	
	// do intersection test
	
	/* SPHERE */
	// t = -b +- sqrt (b*b - c)
	vec3 sphere_c = vec3 (sin (time) * 4.0, cos (time) * 3.0, -10.0);
	float sphere_r = 1.0;
	vec3 omc = ray_o - sphere_c;
	float b = dot (ray_d, omc);
	float c = dot (omc, omc) - sphere_r * sphere_r;
	float bsqmc = b * b - c;
	float t = 10000.0;
	// hit one or both sides
	if (bsqmc >= 0.0) {
		float srbsqmc = sqrt (bsqmc);
		float pos_t = -b + srbsqmc;
		float neg_t = -b - srbsqmc;
		
		// one or more sides behind viewer (pos means `in direction of ray`)
		if (pos_t > 0.0 && neg_t > 0.0) {
			t = neg_t;
			// lesser is closer, even along -z direction
			if (pos_t < neg_t) {
				t = pos_t;
			}
			// colour sphere on pixel
			/* AMBIENT */
			texel.rgb = light_amb * sphere_ka;
			
			/* LAMBERT */
			// normal to a sphere is normalize (P - C);
			vec3 p = ray_o + ray_d * t;
			vec3 n = normalize (p - sphere_c);
			
			vec3 light_dir = normalize (p - light_pos);
			float diff_dp = dot (n, -light_dir);
			diff_dp = max (diff_dp, 0.0);
			
			//float max_range = 7.0f;
			//texel.g = 1.0 * (1.0 - t / max_range) + 0.5;
			texel.rgb += light_diff * sphere_kd * diff_dp;
			
			/* (not BLINN) PHONG */
			vec3 reflection = reflect (light_dir, n);
			vec3 surface_to_viewer = normalize (-p); // viewer is 0,0,0 so no need v-p
			float spec_dp = dot (reflection, surface_to_viewer);
			spec_dp = max (spec_dp, 0.0);
			float spec_fac = pow (spec_dp, spec_exp);
			texel.rgb += light_spec * sphere_ks * spec_fac;
		}
	}
	
	/* PLANE */
	vec3 plane_n = normalize (vec3 (0.0, 0.0, 1.0));
	float plane_d = 11.0;
	vec3 plane_kd = vec3 (0.5, 0.5, 0.0);
	vec3 plane_ks = vec3 (1.0, 1.0, 1.0);
	vec3 plane_ka = vec3 (0.5, 0.5, 0.0);
	float plane_t = -((dot (ray_o, plane_n) + plane_d) / dot (ray_d, plane_n));
	if (plane_t > 0.0 && plane_t < t) { // can now check if sphere_t is closer
		vec3 p = ray_o + ray_d * plane_t;
		vec3 light_dir = normalize (p - light_pos);
		
		/* check if there is a shadow */
		bool shadow = false;
		
		vec3 omc = p - sphere_c;
		float b = dot (normalize (light_pos - p), omc);
		float c = dot (omc, omc) - sphere_r * sphere_r;
		float bsqmc = b * b - c;
		// hit one or both sides
		if (bsqmc >= 0.0) {
			shadow = true;
		}
		
		texel.rgb = light_amb * plane_ka;
		if (!shadow) {
		
			float diff_dp = dot (plane_n, -light_dir);
			diff_dp = max (diff_dp, 0.0);
			texel.rgb += light_diff * plane_kd * diff_dp;
		
			vec3 reflection = reflect (light_dir, plane_n);
			vec3 surface_to_viewer = normalize (-p); // viewer is 0,0,0 so no need v-p
			float spec_dp = dot (reflection, surface_to_viewer);
			spec_dp = max (spec_dp, 0.0);
			float spec_fac = pow (spec_dp, spec_exp);
			texel.rgb += light_spec * plane_ks * spec_fac;
		}
	}
	
	/* gamma correction */
	texel.rgb = pow (texel.rgb, vec3 (1.0 / 2.2, 1.0 / 2.2, 1.0 / 2.2));
	
	// store result in image
	imageStore (img_output, p, texel);
}

/* built-in variables

uvec3 gl_LocalInvocationID - index of shader invocation within local work grp
.xyz from 0 to gl_WorkGroupSize-1
unused dimensions are index 0

uvec3 gl_WorkGroupSize - local work grp size
.xyz - unused dimensions are size 1





uvec3 gl_NumWorkGroups - num of wg in global set (set by glDispatchCompute() )
uvec3 gl_WorkGroupID - index of current wg in global set - range 0 to gl_NumWorkGroups-1

*/
